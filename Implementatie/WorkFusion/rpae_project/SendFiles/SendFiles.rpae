<?xml version="1.0" encoding="UTF-8"?>
<recorder:ActionFlow xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:recorder="http://www.workfusion.com/recorder/v2.3.0.1" ignoreDelays="false">
  <variables>
    <variable name="files" type="LIST" value="[]"/>
    <variable name="bearer_token" type="SECRET" value="bearer.KEY"/>
    <variable name="organisation_id" type="STRING" value="5ccad715074ce2b850f646d5"/>
    <variable name="project_id" type="STRING" value="5e7354bd2a053952c30fc6d7"/>
    <variable name="email" type="SECRET" value="gmail.KEY"/>
    <variable name="password" type="SECRET" value="gmail.VALUE"/>
    <variable name="to" type="SECRET" value="emails.KEY"/>
    <variable name="from" type="SECRET" value="emails.VALUE"/>
    <variable name="send_mail" type="STRING" value="False"/>
    <variable name="gt" type="TABLE" value="[('', '', '');('', '', '');('', '', '');('', '', '');('', '', '');('', '', '');('', '', '')]"/>
  </variables>
  <actions xsi:type="recorder:FileCreateAction" active="true" actionDetails="('D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt', skip if present)" delay="0" path="D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt" resolution="SKIP" encoding="UTF-8" createFolder="false"/>
  <actions xsi:type="recorder:FileListFolderAction" active="true" actionDetails="('C:\Users\Mout Pessemier\Des...' to ${files})" delay="0" targetVariable="files" path="C:\Users\Mout Pessemier\Desktop\temp" type="FILES" includeSubFolders="false" filterBySize="false" filterByDates="false" dateFilterType="FIXED" from="2020-03-20 14:37:24" dateFormat="yyyy-MM-dd HH:mm:ss" unit="DAYS" filterByPattern="false" pattern=""/>
  <actions xsi:type="recorder:TryCatchAction" active="true" actionDetails="" delay="0">
    <tryBlock active="true">
      <actions xsi:type="recorder:CustomScriptAction" active="true" actionDetails="(SendFiles)" delay="0" name="SendFiles" script="                import groovy.json.JsonSlurper&#xD;&#xA;                import org.apache.http.entity.mime.MultipartEntityBuilder&#xD;&#xA;                &#xD;&#xA;                // Important: this script does not work. It describes what should happen and uses pieces of code that should work but with&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// the basic groovy without adding extra jars and libraries&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Mapping the variables&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@CustomScriptAction(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;input = ['bearer_token', 'organisation_id', 'project_id', 'files'],&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output = 'json'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA; &#x9;&#x9;&#x9;&#x9;&#xD;&#xA; &#x9;&#x9;&#x9;&#x9;// Sending the files&#xD;&#xA; &#x9;&#x9;&#x9;&#x9;def customScript() {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // define url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def url = &quot;https://adp.faktion.com/gql/api/organisations/&quot; + organisation_id + &quot;/projectId/&quot; + project_id + &quot;/process&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // create global json parser&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def slurper = new JsonSlurper()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // define global response&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def response&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // Setup post request&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def postConnection = new URL(url)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    HttpURLConnection http = (HttpURLConnection) postConnection.openConnection()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    http.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer &quot; + bearer_token)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    http.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    http.setDoOutput(true)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    http.setRequestMethod('POST')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    MultipartEntityBuilder builder = MultipartEntityBuilder.create();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // add each file as a filestream to the multipart&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        files.each {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            //&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            def content = new FileInputStream(new File(it))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            def name = getName(it)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            content.setRequestProperty(getContentType(name))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            builder.addBinaryBody(&quot;files&quot;, content, name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        http.getOutputStream().write(multipart)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        def responseCode = http.getResponseCode()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        // check if succesfull, if not throw error and catch inside recording&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        if (responseCode >= 200 &amp;&amp; responseCode &lt; 300) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            response = http.getInputStream().getText()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        } else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            json = &quot;Something went wrong during the upload process&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            throw new Exception(&quot;Something went wrong during the upload process&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    } catch (exception) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        json = exception.message&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        throw new Exception(exception.message)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    String upload_id = slurper.parseText(response).uploadId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // start polling for the result of the get request&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def polling = true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def counter = 1&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def getConnection = new URL(url + &quot;/&quot; + upload_id).openConnection()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def getResponse&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def parsedJson&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    do {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        getResponse = getConnection.getInputStream().getText()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        def responseCode = getConnection.get&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        parsedJson = slurper.parseText(getResponse)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        switch (parsedJson.status) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            case &quot;DONE&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                polling = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            case &quot;DOCUMENT_CLASSIFICATION_INTERVENTION&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            case &quot;ENTITY_EXTRACTION_INTERVENTION&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                throw new Exception(&quot;Intervention needed&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            case &quot;FAILED&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                throw new Exception(&quot;Something went wrong during the processing process&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            default:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                counter++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                // Sleep for 7 seconds before resending the request.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                Thread.sleep(7000)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;                break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    } while (polling &amp;&amp; counter &lt;= 150)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // put json into table variable&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    String[] columnNames = new String[]{&quot;EntityName&quot;, &quot;Confidence&quot;, &quot;Theshold&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    List&lt;Object[]> temp = new ArrayList();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    parsedJson.documents.each {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        def threshold = it.documentType.threshold&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        it.entities.each {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            Object[] row = new Object[3];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            row[0] = it.entityType.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            row[1] = it.confidence&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            row[2] = threshold&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            temp.add(row)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    Object[][] json = new Object[temp.size()][]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    for (int i = 0; i &lt; temp.size(); i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        json[i] = temp.get(i)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA; &#x9;&#x9;&#x9;&#x9;&#xD;&#xA; &#x9;&#x9;&#x9;&#x9;def getContentType(String name){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def splitName = name.split(&quot;.&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def extension = splitName[1]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    switch (extension) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;pdf&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;application/pdf&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;png&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;image/png&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;doc&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;application/msword&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;docx&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;txt&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;text/plain&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;tif&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;image/tif&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;jpg&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;image/jpg&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        case &quot;rtf&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;application/rtf&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        // default == not supported type, we don't set content type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;        default:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            return &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;def getName(String path) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    // Java equivalent of \\&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    def splitPath = path.split(&quot;\\\\&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    return splitPath[splitPath.length - 1]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}"/>
    </tryBlock>
    <catchBlock active="true">
      <actions xsi:type="recorder:FileWriteAction" active="true" actionDetails="('&quot;[${date}]: Something went ...' to 'D:\BachelorPro...ut\Output.txt')" delay="0" path="D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt" content="&quot;[${date}]: Something went wrong when sending the files to Metamaze. \n&quot;" overwrite="false" encoding="UTF-8"/>
    </catchBlock>
  </actions>
  <actions xsi:type="recorder:IfElseAction" active="true" actionDetails="(send_mail = &quot;True&quot;)" delay="0" leftOperand="${send_mail}" rightOperand="True" leftOperandType="VARIABLE" rightOperandType="STRING">
    <ifBlock active="true">
      <actions xsi:type="recorder:TryCatchAction" active="true" actionDetails="" delay="0">
        <tryBlock active="true">
          <actions xsi:type="recorder:CustomScriptAction" active="true" actionDetails="(SendMail)" delay="0" name="SendMail" script="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xD;&#xA;&lt;config xmlns=&quot;http://web-harvest.sourceforge.net/schema/1.0/config&quot;>&#xD;&#xA;&#x9;&lt;mail smtp-host=&quot;smtp.gmail.com&quot; &#xD;&#xA;&#x9;&#x9;smtp-port=&quot;587&quot; &#xD;&#xA;&#x9;&#x9;type=&quot;plain/text&quot;&#xD;&#xA;&#x9;&#x9;from=from&#xD;&#xA;&#x9;&#x9;to=to&#xD;&#xA;&#x9;&#x9;subject=&quot;Some entity thresholds were not reached&quot;&#xD;&#xA;&#x9;&#x9;charset=&quot;UTF-8&quot;&#xD;&#xA;&#x9;&#x9;username=email&#xD;&#xA;&#x9;&#x9;password=password&#xD;&#xA;&#x9;&#x9;security=&quot;ssl&quot;>&#xD;&#xA;&#x9;&#x9;&#x9;Hi there, &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;This is your Metamaze upload report:&#xD;&#xA;&#x9;&#x9;&#x9;Some entities were not extracted with a high enough certainity threshold : + uncertainEntities + .&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;We recommand you go check it Out.&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;The Metamaze Team  &#xD;&#xA;&#x9;&lt;/mail>&#xD;&#xA;&#x9;&lt;export include-original-data=&quot;true&quot;>&lt;/export>&#xD;&#xA;&lt;/config>"/>
          <actions xsi:type="recorder:FileWriteAction" active="true" actionDetails="('&quot;[${date}]: Succesfully fin...' to 'D:\BachelorPro...ut\Output.txt')" delay="0" path="D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt" content="&quot;[${date}]: Succesfully finished extraction and sent mail.&quot;" overwrite="false" encoding="UTF-8"/>
        </tryBlock>
        <catchBlock active="true">
          <actions xsi:type="recorder:FileWriteAction" active="true" actionDetails="('&quot;[${date}]: Something went ...' to 'D:\BachelorPro...ut\Output.txt')" delay="0" path="D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt" content="&quot;[${date}]: Something went wrong during the sending of the mail. \n&quot;" overwrite="false" encoding="UTF-8"/>
        </catchBlock>
      </actions>
    </ifBlock>
    <elseBlock active="true">
      <actions xsi:type="recorder:FileWriteAction" active="true" actionDetails="('&quot;[${date}]: Succesfully fin...' to 'D:\BachelorPro...ut\Output.txt')" delay="0" path="D:\BachelorProef\Implementatie\WorkFusion\Output\Output.txt" content="&quot;[${date}]: Succesfully finished extraction.&quot;" overwrite="false" encoding="UTF-8"/>
    </elseBlock>
  </actions>
  <settings/>
</recorder:ActionFlow>
